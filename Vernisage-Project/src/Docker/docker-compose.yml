version: '3'
services:

  # MySQL Datenbank
  db:
    image: mysql:latest              # Verwendet das offizielle MySQL Image
    restart: always                  # Startet den Container automatisch neu solange er nicht enfernt wird
    container_name: MYSQL           
    environment:                     # Umgebungsvariablen für MySQL Setup
      MYSQL_ROOT_PASSWORD: Pr!m4bAl13rina
      MYSQL_DATABASE: hist_climate_ger  # Erstellt eine neue Datenbank
      MYSQL_USER: myuser            # Erstellt einen neuen Benutzer
      MYSQL_PASSWORD: mypassword
    ports: ['3307:3306']            # Port-Mapping: Host-Port 3307 zu Container-Port 3306
    healthcheck:                     # checkt ob der Container ohne Error läuft, falls er innerhalb von 5sec. bereits "healthy" ist, ist der healthcheck irrelevant
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p Pr!m4bAl13rina"]
      start_period: 5s              # Wartezeit vor dem ersten Check
      interval: 5s                  # Intervall zwischen den Checks
      timeout: 5s                   # Timeout für jeden Check
      retries: 55                   # Anzahl der Wiederholungsversuche
    networks:
      - monitoring                  # Network: Netzwerk

  # Datenverarbeitung
  python:
    image: pythonscript            #eigenes Docker Image. wird durch die Dockerfile erstellt.
    container_name: PYTHON
    build:
      context: ../..               # Build-Kontext für das Dockerfile
      dockerfile: data/Dockerfile
    depends_on:                    # wartet bis der MYSQL Container fehlerfrei läuft
      db:
        condition: service_healthy
    networks:
      - monitoring
    environment:                   # Verbindung zum MYSQL COntainer. Können sonst nicht drauf zugreifen
      MYSQL_HOST: db
      MYSQL_PORT: 3306
    healthcheck:                   # wieder healthcheck. Versucht mit dem MYSQL Container sich zu verbinden. Unnötig
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p Pr!m4bAl13rina" ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55

  openmeteo-exporter:
    image: openmeteo                                #eigenes Docker Image. wird durch die Dockerfile erstellt. selbiges wie beim PYTHON Container
    container_name: Openmeteo
    build:
      context: ../..
      dockerfile: src/Docker/Dockerfile
    ports:
      - "8000:8000"
    restart: unless-stopped                       # restarted den Conatiner unabhängig vom Exit Code
    depends_on:                                   # Wartet auf den MySQL Container da wir auf die Datenbank zugreifen müssen
      db:
        condition: service_healthy
    networks:
      - monitoring
    environment:                                  # Verbindung zum MYSQL Container
      MYSQL_HOST: db
      MYSQL_PORT: 3306

  # Prometheus
  prometheus:
    image: prom/prometheus        # Offizielles Prometheus Image
    container_name: Prometheus
    ports:
      - 9090:9090               # Standard Prometheus Port
    volumes:                     # Bindet die Konfigurationsdatei ein
      - ../Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

  # Grafana
  grafana:
     image: grafana/grafana      # Offizielles Grafana Image
     container_name: Grafana
     ports:
       - 3000:3000              # Standard Grafana Port
     environment:               # Admin Zugangsdaten für Grafana
       - GF_SECURITY_ADMIN_USER=MyLittleEdi3978
       - GF_SECURITY_ADMIN_PASSWORD=HappyHippo
     networks:
       - monitoring

# Netzwerk-Konfiguration
networks:
  monitoring:                    # Hauptnetzwerk für alle Services
    driver: bridge              # Bridge Treiber um die Conatiner miteinander zu verbinden

    #external: true            # Auskommentiert, da kein externes Netzwerk verwendet wird